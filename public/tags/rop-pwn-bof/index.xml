<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rop, Pwn, Bof on </title>
    <link>http://localhost:1313/tags/rop-pwn-bof/</link>
    <description>Recent content in Rop, Pwn, Bof on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Jul 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/rop-pwn-bof/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to ROP</title>
      <link>http://localhost:1313/posts/rop-introduction/</link>
      <pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/rop-introduction/</guid>
      <description>&lt;p&gt;This blog post will let you know about the ROP or Return Oriented Programming.&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h1 id=&#34;what-is-rop&#34;&gt;What is ROP?&lt;/h1&gt;&#xA;&lt;p&gt;Return Oriented Programming is a modern method of exploiting a binary that will allow us to take control of the stack and the abuse program&amp;rsquo;s control flow by the help of gadgets.&#xA;Often times, this technique is used to exploit a binary which takes input without bound checking that will result in overflow of the memory in which the input is being stored resulting in segmentation fault.&#xA;This method is only used when we have handful of gadgets i.e. instruction sequences ending with &lt;strong&gt;&amp;ldquo;ret&amp;rdquo;&lt;/strong&gt; or byte &lt;strong&gt;&amp;ldquo;c3&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
