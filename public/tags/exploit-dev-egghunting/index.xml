<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exploit-Dev, Egghunting on Pwnfuzz Blog</title>
    <link>http://localhost:1313/tags/exploit-dev-egghunting/</link>
    <description>Recent content in Exploit-Dev, Egghunting on Pwnfuzz Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/exploit-dev-egghunting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploit Dev: EggHunting Explained</title>
      <link>http://localhost:1313/posts/exploit-dev-egghunting/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/exploit-dev-egghunting/</guid>
      <description>&lt;p&gt;EggHunting, if simply put, is a technique in exploit development which is used to search for a specific keyword in an application memory space to further aid in the exploit if there is a length restriction. Egg in this case refers to specific keyword/pattern and “hunter” as put you’re searching in all the accessible address space to find the pattern, hence the hunt.&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Before we begin, we must understand the need of the egghunting technique. Consider a scenario where you are trying to exploit a buffer overflow but for some reason, you are unable to put the shellcode due to the length limitation of input (we will see this later in action). Given as an exploit developer, the end goal is always to get code execution by using any method possible.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
