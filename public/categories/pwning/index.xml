<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pwning on </title>
    <link>http://localhost:1313/categories/pwning/</link>
    <description>Recent content in Pwning on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Apr 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/pwning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ret2csu - A Return Oriented Programming Technique</title>
      <link>http://localhost:1313/posts/ret2csu/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ret2csu/</guid>
      <description>&lt;p&gt;This is an in-depth guide on &lt;code&gt;ret2csu&lt;/code&gt; technique. I tried to make this article as much detailed as I could, including references and some binary to practice it with.&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h1 id=&#34;what-is-ret2csu&#34;&gt;What is ret2csu?&lt;/h1&gt;&#xA;&lt;p&gt;Well, as you already know this a sub-technique of Return Oriented Programming. As you already know that Return Oriented Programming is the technique of using the available gadgets from the binary to craft a payload. The &lt;code&gt;ret2csu&lt;/code&gt; technique involves the utilization of the gadgets present in &lt;code&gt;__libc_csu_init&lt;/code&gt; to fill in the gaps of unavailable gadgets. For example, what if we want to do an &lt;code&gt;execve&lt;/code&gt; syscall, we would need a &lt;code&gt;rdi&lt;/code&gt; to pass &lt;code&gt;/bin/sh&lt;/code&gt;, &lt;code&gt;rsi&lt;/code&gt; for passing &lt;code&gt;0&lt;/code&gt; and same for &lt;code&gt;rdx&lt;/code&gt; and while looking for gadgets in binary, we didn&amp;rsquo;t  find any &lt;code&gt;pop rdx; ret;&lt;/code&gt;, then we use gadgets from &lt;code&gt;__libc_csu_init&lt;/code&gt; to craft a chain carefully which will load the contents we gave to the &lt;code&gt;rdx&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ROP - ret2libc attack</title>
      <link>http://localhost:1313/posts/ret2libc-pwntools/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ret2libc-pwntools/</guid>
      <description>&lt;p&gt;Today, I will show you how to use Return Oriented Programming for doing a &lt;strong&gt;ret2libc&lt;/strong&gt; attack.&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h1 id=&#34;foreword&#34;&gt;Foreword&lt;/h1&gt;&#xA;&lt;p&gt;This is much more harder than what we encountered earlier, unlike before we won&amp;rsquo;t have any function preloaded with strings like &lt;code&gt;/bin/cat flag.txt&lt;/code&gt;. It won&amp;rsquo;t even contain a &lt;code&gt;system&lt;/code&gt; so we will use &lt;code&gt;libc.so.6&lt;/code&gt; to get the &lt;code&gt;system&lt;/code&gt; and &lt;code&gt;/bin/sh&lt;/code&gt; address to spawn a shell.&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-is-return-to-libc-or-ret2libc-attack&#34;&gt;What is Return-to-libc or ret2libc attack?&lt;/h1&gt;&#xA;&lt;p&gt;A &amp;ldquo;return-to-libc&amp;rdquo; attack is a computer security attack usually starting with a buffer overflow in which a subroutine return address on a call stack is replaced by an address of a subroutine that is already present in the processâ€™ executable memory, bypassing the no-execute bit feature (if present) and ridding the attacker of the need to inject their own code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ROP- Basic Exploit Creation</title>
      <link>http://localhost:1313/posts/rop-tools-usage/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/rop-tools-usage/</guid>
      <description>&lt;p&gt;This blog post will teach you basics of ROP i.e. how to use tools efficiently.&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;This post is more practical, so tag along with radare2, pwntools, gdb and ropper ready. I&amp;rsquo;m using &lt;a href=&#34;https://ropemporium.com/binary/ret2win.zip&#34;&gt;this&lt;/a&gt; binary from ROP-Emporium and it&amp;rsquo;s a basic one to start with. Grab it and read further.&lt;/p&gt;&#xA;&lt;h1 id=&#34;the-eip-and-rip-register&#34;&gt;The EIP and RIP Register&lt;/h1&gt;&#xA;&lt;p&gt;I&amp;rsquo;m starting off with IP register i.e. Instruction Pointer in 16-bit mode, Extended Instruction Pointer in 32-bit architecture and RIP in 64-bit. It contains the address of next instruction that will be executed hence, controlling the flow of command. Consider this register as something that will have the control of program flow since it has the next instruction which has to be executed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to ROP</title>
      <link>http://localhost:1313/posts/rop-introduction/</link>
      <pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/rop-introduction/</guid>
      <description>&lt;p&gt;This blog post will let you know about the ROP or Return Oriented Programming.&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;h1 id=&#34;what-is-rop&#34;&gt;What is ROP?&lt;/h1&gt;&#xA;&lt;p&gt;Return Oriented Programming is a modern method of exploiting a binary that will allow us to take control of the stack and the abuse program&amp;rsquo;s control flow by the help of gadgets.&#xA;Often times, this technique is used to exploit a binary which takes input without bound checking that will result in overflow of the memory in which the input is being stored resulting in segmentation fault.&#xA;This method is only used when we have handful of gadgets i.e. instruction sequences ending with &lt;strong&gt;&amp;ldquo;ret&amp;rdquo;&lt;/strong&gt; or byte &lt;strong&gt;&amp;ldquo;c3&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
